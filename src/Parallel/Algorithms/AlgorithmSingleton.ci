// Distributed under the MIT License.
// See LICENSE.txt for details.

module AlgorithmSingleton {

  include "Utilities/TaggedTuple.hpp";
  include "Parallel/GlobalCache.decl.h";
  include "Parallel/MaxInlineMethodsReached.hpp";
  include "Parallel/Phase.hpp";

  template <typename ParallelComponent, typename SpectreArrayIndex>
  array [SpectreIndex_detail::ArrayIndex<SpectreArrayIndex>] AlgorithmSingleton{
    entry AlgorithmSingleton(
        Parallel::CProxy_GlobalCache<typename ParallelComponent::metavariables>,
        tuples::tagged_tuple_from_typelist<
            typename ParallelComponent::simple_tags_from_options>
            initialization_items);

    template <typename Action, typename... Args>
    entry void simple_action(std::tuple<Args...> & args);

    template <typename Action>
    entry void simple_action();

    template <typename Action, typename Arg>
    entry [reductiontarget] void reduction_action(Arg arg);

    entry void perform_algorithm();

    entry void perform_algorithm(bool);

    entry void start_phase(Parallel::Phase);

    template <typename ReceiveTag, typename ReceiveData_t>
    entry [inline] void receive_data(typename ReceiveTag::temporal_id&,
                                     ReceiveData_t&,
                                     bool enable_if_disabled = false);

    entry void set_terminate(bool);

    entry void contribute_termination_status_to_main();
  }
}
